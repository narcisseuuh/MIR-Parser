(* Generated by ocaml-rs *)

open! Bigarray



(* file: mir_types.rs *)

type mutability = Mut | Not
and un_op = Not | Neg | PtrMetadata
and bin_op = Add | AddUnchecked | AddWithOverflow
    | Sub | SubUnchecked | SubWithOverflow
    | Mul | MulUnchecked | MulWithOverflow
    | Div | Rem | BitXor | BitAnd | ShrUnchecked
    | BitOr | Shl | Shr | Eq | Ne | ShlUnchecked
    | Lt | Le | Gt | Ge | Offset | Cmp
and null_op = SizeOf | AlignOf | UbChecks | Unknown
and span = int32 * int32
and borrow_kind = Shared | Fake | Mut | Unknown
and rkind = FnEntry | TwoPhase | Raw | Default
and expr_kind = BinOp of bin_op | UnOp of un_op | FunctionCall | CastAs | CastUse
and const_val = ScalarInt of int32 | ScalarPtr of int32 * int32 * int
    | ZeroSized | Slice of int32 * mutability | Indirect of int32 * int32
and typ = Bool | Char | Isize | I of int32 | USize
    | U of int32 | F of int32 | Str | Array of typ * const
    | Slice of typ | RawPtr of typ * mutability | Ref of typ * mutability
    | Tuple of typ list | Unknown
and const = Ty of typ * const | Val of const_val * typ
    | Param of int32 | Expr of expr_kind * arg list | Unknown
and arg = typ * const
and projection = Deref | Field of int32 * typ | Index of int32
    | ConstantIndex of int32 * int32 * bool | Subslice of int32 * int32 * bool
    | Downcast of int32 | OpaqueCast of typ | Subtype of typ | UnwrapUnsafeBinder of typ
and place = { local : int32 ; proj : projection list }
and local_info = ConstRef of int32 | AggregateTemp | DerefTemp | FakeBorrow | Boring
    | StaticRef of int32 | Unknown
and local_decl = { scope : int32 ; local : local_info ; typ : typ ; mut : mutability }
and operand = Copy of place | Move of place | Constant of const
and intrinsic = Assume of operand | CopyNonOverlapping of operand * operand * operand
and rvalue = Use of operand | Repeat of operand * const
    | Ref of borrow_kind * place | RawPtr of mutability * place
    | Len of place | BinaryOp of bin_op * operand * operand
    | NullaryOp of null_op | UnaryOp of un_op * operand | Discriminant of place
    | ShallowInitBox of operand * typ | CopyForDeref of place
    | WrapUnsafeBinder of operand * typ | Unknown
and statement_kind = Assign of place * rvalue | SetDiscriminant of place * int32
    | Deinit of place | StorageLive of int32 | StorageDead of int32 
    | Retag of rkind * place | PlaceMention of place | Intrinsic of intrinsic
    | Nop | ConstEvalCounter | Goto of int32 | SwitchInt of operand * targets
    | UnwindResume | UnwindTerminate | Unreachable | Return | Drop of drop_info
    | Call of call_info | Assert of assert_info | CoroutineDrop | Unknown
and statement = { skind : statement_kind ; span : span ; scope : int32 }
and targets = { targets : int32 list ; values : int32 list }
and call_info = { func : operand ; args : operand list ; dest : place ;
    target : int32 option ; unwind : unwind_action ; span : span }
and assert_message = BoundsCheck of operand * operand
    | Overflow of bin_op * operand * operand
    | OverflowNeg of operand | DivisionByZero of operand
    | RemainderByZero of operand | MisalignedPointerDereference of operand * operand
    | NullPointerDereference | Unknown
and drop_info = { place : place ; target : int32 ;
    unwind : unwind_action ; replace : bool ; drop : int32 option }
and assert_info = { cond : operand ; expected : bool ; msg : string ;
    target : int32 ; unwind : unwind_action }
and basic_block = { statements : statement list ; is_cleanup : bool }
and unwind_action = Continue | Unreachable | Terminate | Cleanup of int32
and var_debug_info_content = Place of place | Const of const
and var_debug_info_fragment = { ty : typ ; projection : projection list }
and var_debug_info = { content : var_debug_info_content ; scope : int32 ; name : string ;
    arg_index : int32 option ; composite : var_debug_info_fragment option }
and body = { stmts : basic_block list ; local_decls : local_decl list ;
    var_debug_info : var_debug_info list ; arg_count : int32 ;
    spread_arg : int32 option ; span : span }


(* file: lib.rs *)

external get_mir: string -> body list = "get_mir"
